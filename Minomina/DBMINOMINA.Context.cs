//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Minomina
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MINOMINAEntities : DbContext
    {
        public MINOMINAEntities()
            : base("name=MINOMINAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AsigCabecera> AsigCabeceras { get; set; }
        public virtual DbSet<AsigNovedadDetalle> AsigNovedadDetalles { get; set; }
        public virtual DbSet<Colaboradore> Colaboradores { get; set; }
        public virtual DbSet<Departamento> Departamentos { get; set; }
        public virtual DbSet<NominaCabecera> NominaCabeceras { get; set; }
        public virtual DbSet<NominaDetalle> NominaDetalles { get; set; }
        public virtual DbSet<Novedade> Novedades { get; set; }
        public virtual DbSet<Puesto> Puestos { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<DataGridPuesto> DataGridPuestoes { get; set; }
        public virtual DbSet<DatagridColaborador> DatagridColaboradors { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_DeleteColaborador(string idcolaborador)
        {
            var idcolaboradorParameter = idcolaborador != null ?
                new ObjectParameter("Idcolaborador", idcolaborador) :
                new ObjectParameter("Idcolaborador", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteColaborador", idcolaboradorParameter);
        }
    
        public virtual int SP_DeleteDepartemento(Nullable<int> rEID)
        {
            var rEIDParameter = rEID.HasValue ?
                new ObjectParameter("REID", rEID) :
                new ObjectParameter("REID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteDepartemento", rEIDParameter);
        }
    
        public virtual int sp_DeleteNovedad(string idnovedad)
        {
            var idnovedadParameter = idnovedad != null ?
                new ObjectParameter("idnovedad", idnovedad) :
                new ObjectParameter("idnovedad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteNovedad", idnovedadParameter);
        }
    
        public virtual int SP_DeletePuesto(Nullable<int> rECID)
        {
            var rECIDParameter = rECID.HasValue ?
                new ObjectParameter("RECID", rECID) :
                new ObjectParameter("RECID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeletePuesto", rECIDParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_InserAsingCabecera(string iDColaborador, Nullable<int> rEIDColaborador, string colaborador, Nullable<double> total)
        {
            var iDColaboradorParameter = iDColaborador != null ?
                new ObjectParameter("IDColaborador", iDColaborador) :
                new ObjectParameter("IDColaborador", typeof(string));
    
            var rEIDColaboradorParameter = rEIDColaborador.HasValue ?
                new ObjectParameter("REIDColaborador", rEIDColaborador) :
                new ObjectParameter("REIDColaborador", typeof(int));
    
            var colaboradorParameter = colaborador != null ?
                new ObjectParameter("Colaborador", colaborador) :
                new ObjectParameter("Colaborador", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InserAsingCabecera", iDColaboradorParameter, rEIDColaboradorParameter, colaboradorParameter, totalParameter);
        }
    
        public virtual int sp_InsertaNovedad(string nombre, string tipo, Nullable<bool> aplicatax)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var aplicataxParameter = aplicatax.HasValue ?
                new ObjectParameter("aplicatax", aplicatax) :
                new ObjectParameter("aplicatax", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertaNovedad", nombreParameter, tipoParameter, aplicataxParameter);
        }
    
        public virtual int sp_InsertarPuestos(string puesto, Nullable<double> salario, string frecuenciasalario, Nullable<double> pagohoras, Nullable<int> cantidadDisponible, string deberes, Nullable<int> rECIDDEPAR)
        {
            var puestoParameter = puesto != null ?
                new ObjectParameter("Puesto", puesto) :
                new ObjectParameter("Puesto", typeof(string));
    
            var salarioParameter = salario.HasValue ?
                new ObjectParameter("Salario", salario) :
                new ObjectParameter("Salario", typeof(double));
    
            var frecuenciasalarioParameter = frecuenciasalario != null ?
                new ObjectParameter("Frecuenciasalario", frecuenciasalario) :
                new ObjectParameter("Frecuenciasalario", typeof(string));
    
            var pagohorasParameter = pagohoras.HasValue ?
                new ObjectParameter("Pagohoras", pagohoras) :
                new ObjectParameter("Pagohoras", typeof(double));
    
            var cantidadDisponibleParameter = cantidadDisponible.HasValue ?
                new ObjectParameter("CantidadDisponible", cantidadDisponible) :
                new ObjectParameter("CantidadDisponible", typeof(int));
    
            var deberesParameter = deberes != null ?
                new ObjectParameter("Deberes", deberes) :
                new ObjectParameter("Deberes", typeof(string));
    
            var rECIDDEPARParameter = rECIDDEPAR.HasValue ?
                new ObjectParameter("RECIDDEPAR", rECIDDEPAR) :
                new ObjectParameter("RECIDDEPAR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarPuestos", puestoParameter, salarioParameter, frecuenciasalarioParameter, pagohorasParameter, cantidadDisponibleParameter, deberesParameter, rECIDDEPARParameter);
        }
    
        public virtual int sp_InsertDepartemento(string departmento)
        {
            var departmentoParameter = departmento != null ?
                new ObjectParameter("Departmento", departmento) :
                new ObjectParameter("Departmento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertDepartemento", departmentoParameter);
        }
    
        public virtual int SP_InsertNominaCabecera(Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta, Nullable<double> totalNomina, Nullable<bool> aPROBADOCION, string aPROBADO, Nullable<bool> gENERADA)
        {
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            var totalNominaParameter = totalNomina.HasValue ?
                new ObjectParameter("TotalNomina", totalNomina) :
                new ObjectParameter("TotalNomina", typeof(double));
    
            var aPROBADOCIONParameter = aPROBADOCION.HasValue ?
                new ObjectParameter("APROBADOCION", aPROBADOCION) :
                new ObjectParameter("APROBADOCION", typeof(bool));
    
            var aPROBADOParameter = aPROBADO != null ?
                new ObjectParameter("APROBADO", aPROBADO) :
                new ObjectParameter("APROBADO", typeof(string));
    
            var gENERADAParameter = gENERADA.HasValue ?
                new ObjectParameter("GENERADA", gENERADA) :
                new ObjectParameter("GENERADA", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertNominaCabecera", fechaDesdeParameter, fechaHastaParameter, totalNominaParameter, aPROBADOCIONParameter, aPROBADOParameter, gENERADAParameter);
        }
    
        public virtual int SP_InsertNominaDetalle(Nullable<int> rECIDCabecera, Nullable<int> rECIDAsingCabecera, string iDColaborador, string nombre, Nullable<double> totalDeducciones, Nullable<double> totalIngreso, Nullable<double> totalPagar, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var rECIDCabeceraParameter = rECIDCabecera.HasValue ?
                new ObjectParameter("RECIDCabecera", rECIDCabecera) :
                new ObjectParameter("RECIDCabecera", typeof(int));
    
            var rECIDAsingCabeceraParameter = rECIDAsingCabecera.HasValue ?
                new ObjectParameter("RECIDAsingCabecera", rECIDAsingCabecera) :
                new ObjectParameter("RECIDAsingCabecera", typeof(int));
    
            var iDColaboradorParameter = iDColaborador != null ?
                new ObjectParameter("IDColaborador", iDColaborador) :
                new ObjectParameter("IDColaborador", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var totalDeduccionesParameter = totalDeducciones.HasValue ?
                new ObjectParameter("TotalDeducciones", totalDeducciones) :
                new ObjectParameter("TotalDeducciones", typeof(double));
    
            var totalIngresoParameter = totalIngreso.HasValue ?
                new ObjectParameter("TotalIngreso", totalIngreso) :
                new ObjectParameter("TotalIngreso", typeof(double));
    
            var totalPagarParameter = totalPagar.HasValue ?
                new ObjectParameter("TotalPagar", totalPagar) :
                new ObjectParameter("TotalPagar", typeof(double));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertNominaDetalle", rECIDCabeceraParameter, rECIDAsingCabeceraParameter, iDColaboradorParameter, nombreParameter, totalDeduccionesParameter, totalIngresoParameter, totalPagarParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual int SP_InsertNovedad(Nullable<int> rECIDHEADER, string iDAsignacion, Nullable<int> rECIDNOVEDAD, string descNovedad, Nullable<double> mONTO, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta, string tipoNovedad)
        {
            var rECIDHEADERParameter = rECIDHEADER.HasValue ?
                new ObjectParameter("RECIDHEADER", rECIDHEADER) :
                new ObjectParameter("RECIDHEADER", typeof(int));
    
            var iDAsignacionParameter = iDAsignacion != null ?
                new ObjectParameter("IDAsignacion", iDAsignacion) :
                new ObjectParameter("IDAsignacion", typeof(string));
    
            var rECIDNOVEDADParameter = rECIDNOVEDAD.HasValue ?
                new ObjectParameter("RECIDNOVEDAD", rECIDNOVEDAD) :
                new ObjectParameter("RECIDNOVEDAD", typeof(int));
    
            var descNovedadParameter = descNovedad != null ?
                new ObjectParameter("DescNovedad", descNovedad) :
                new ObjectParameter("DescNovedad", typeof(string));
    
            var mONTOParameter = mONTO.HasValue ?
                new ObjectParameter("MONTO", mONTO) :
                new ObjectParameter("MONTO", typeof(double));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            var tipoNovedadParameter = tipoNovedad != null ?
                new ObjectParameter("TipoNovedad", tipoNovedad) :
                new ObjectParameter("TipoNovedad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertNovedad", rECIDHEADERParameter, iDAsignacionParameter, rECIDNOVEDADParameter, descNovedadParameter, mONTOParameter, fechaDesdeParameter, fechaHastaParameter, tipoNovedadParameter);
        }
    
        public virtual int sp_InsertUpdatePass(string pass, string cod, string rol)
        {
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var codParameter = cod != null ?
                new ObjectParameter("cod", cod) :
                new ObjectParameter("cod", typeof(string));
    
            var rolParameter = rol != null ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdatePass", passParameter, codParameter, rolParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_UpdateColaborador(string codigoEempleado, Nullable<int> rECIDPUESTO, string estatusLaboral, string nombres, string apellidos, string sexo, string cedulaPasaporte, string direccion, string email, string telefono, string cuentaBancaria, string tipoCuenta, string banco, Nullable<System.DateTime> fechaingreso, Nullable<bool> usuarioSistema)
        {
            var codigoEempleadoParameter = codigoEempleado != null ?
                new ObjectParameter("CodigoEempleado", codigoEempleado) :
                new ObjectParameter("CodigoEempleado", typeof(string));
    
            var rECIDPUESTOParameter = rECIDPUESTO.HasValue ?
                new ObjectParameter("RECIDPUESTO", rECIDPUESTO) :
                new ObjectParameter("RECIDPUESTO", typeof(int));
    
            var estatusLaboralParameter = estatusLaboral != null ?
                new ObjectParameter("EstatusLaboral", estatusLaboral) :
                new ObjectParameter("EstatusLaboral", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var cedulaPasaporteParameter = cedulaPasaporte != null ?
                new ObjectParameter("CedulaPasaporte", cedulaPasaporte) :
                new ObjectParameter("CedulaPasaporte", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var cuentaBancariaParameter = cuentaBancaria != null ?
                new ObjectParameter("CuentaBancaria", cuentaBancaria) :
                new ObjectParameter("CuentaBancaria", typeof(string));
    
            var tipoCuentaParameter = tipoCuenta != null ?
                new ObjectParameter("TipoCuenta", tipoCuenta) :
                new ObjectParameter("TipoCuenta", typeof(string));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("Banco", banco) :
                new ObjectParameter("Banco", typeof(string));
    
            var fechaingresoParameter = fechaingreso.HasValue ?
                new ObjectParameter("Fechaingreso", fechaingreso) :
                new ObjectParameter("Fechaingreso", typeof(System.DateTime));
    
            var usuarioSistemaParameter = usuarioSistema.HasValue ?
                new ObjectParameter("UsuarioSistema", usuarioSistema) :
                new ObjectParameter("UsuarioSistema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateColaborador", codigoEempleadoParameter, rECIDPUESTOParameter, estatusLaboralParameter, nombresParameter, apellidosParameter, sexoParameter, cedulaPasaporteParameter, direccionParameter, emailParameter, telefonoParameter, cuentaBancariaParameter, tipoCuentaParameter, bancoParameter, fechaingresoParameter, usuarioSistemaParameter);
        }
    
        public virtual int sp_UpdateNovedad(string idnovedad, string nombre, string tipo, Nullable<bool> aplicatax)
        {
            var idnovedadParameter = idnovedad != null ?
                new ObjectParameter("idnovedad", idnovedad) :
                new ObjectParameter("idnovedad", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var aplicataxParameter = aplicatax.HasValue ?
                new ObjectParameter("aplicatax", aplicatax) :
                new ObjectParameter("aplicatax", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateNovedad", idnovedadParameter, nombreParameter, tipoParameter, aplicataxParameter);
        }
    
        public virtual int sp_UpdatePuesto(string iDPUESTO, string puesto, Nullable<double> salario, string frecuenciasalario, Nullable<double> pagohoras, Nullable<int> cantidadDisponible, string deberes, Nullable<int> rECIDDEPAR)
        {
            var iDPUESTOParameter = iDPUESTO != null ?
                new ObjectParameter("IDPUESTO", iDPUESTO) :
                new ObjectParameter("IDPUESTO", typeof(string));
    
            var puestoParameter = puesto != null ?
                new ObjectParameter("Puesto", puesto) :
                new ObjectParameter("Puesto", typeof(string));
    
            var salarioParameter = salario.HasValue ?
                new ObjectParameter("Salario", salario) :
                new ObjectParameter("Salario", typeof(double));
    
            var frecuenciasalarioParameter = frecuenciasalario != null ?
                new ObjectParameter("Frecuenciasalario", frecuenciasalario) :
                new ObjectParameter("Frecuenciasalario", typeof(string));
    
            var pagohorasParameter = pagohoras.HasValue ?
                new ObjectParameter("Pagohoras", pagohoras) :
                new ObjectParameter("Pagohoras", typeof(double));
    
            var cantidadDisponibleParameter = cantidadDisponible.HasValue ?
                new ObjectParameter("CantidadDisponible", cantidadDisponible) :
                new ObjectParameter("CantidadDisponible", typeof(int));
    
            var deberesParameter = deberes != null ?
                new ObjectParameter("Deberes", deberes) :
                new ObjectParameter("Deberes", typeof(string));
    
            var rECIDDEPARParameter = rECIDDEPAR.HasValue ?
                new ObjectParameter("RECIDDEPAR", rECIDDEPAR) :
                new ObjectParameter("RECIDDEPAR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePuesto", iDPUESTOParameter, puestoParameter, salarioParameter, frecuenciasalarioParameter, pagohorasParameter, cantidadDisponibleParameter, deberesParameter, rECIDDEPARParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SP_InsertColaboradores(Nullable<int> rECIDPUESTO, string estatusLaboral, string nombres, string apellidos, string sexo, string cedulaPasaporte, string direccion, string email, string telefono, string cuentaBancaria, string tipoCuenta, string banco, Nullable<System.DateTime> fechaingreso, Nullable<bool> usuarioSistema)
        {
            var rECIDPUESTOParameter = rECIDPUESTO.HasValue ?
                new ObjectParameter("RECIDPUESTO", rECIDPUESTO) :
                new ObjectParameter("RECIDPUESTO", typeof(int));
    
            var estatusLaboralParameter = estatusLaboral != null ?
                new ObjectParameter("EstatusLaboral", estatusLaboral) :
                new ObjectParameter("EstatusLaboral", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var cedulaPasaporteParameter = cedulaPasaporte != null ?
                new ObjectParameter("CedulaPasaporte", cedulaPasaporte) :
                new ObjectParameter("CedulaPasaporte", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var cuentaBancariaParameter = cuentaBancaria != null ?
                new ObjectParameter("CuentaBancaria", cuentaBancaria) :
                new ObjectParameter("CuentaBancaria", typeof(string));
    
            var tipoCuentaParameter = tipoCuenta != null ?
                new ObjectParameter("TipoCuenta", tipoCuenta) :
                new ObjectParameter("TipoCuenta", typeof(string));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("Banco", banco) :
                new ObjectParameter("Banco", typeof(string));
    
            var fechaingresoParameter = fechaingreso.HasValue ?
                new ObjectParameter("Fechaingreso", fechaingreso) :
                new ObjectParameter("Fechaingreso", typeof(System.DateTime));
    
            var usuarioSistemaParameter = usuarioSistema.HasValue ?
                new ObjectParameter("UsuarioSistema", usuarioSistema) :
                new ObjectParameter("UsuarioSistema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertColaboradores", rECIDPUESTOParameter, estatusLaboralParameter, nombresParameter, apellidosParameter, sexoParameter, cedulaPasaporteParameter, direccionParameter, emailParameter, telefonoParameter, cuentaBancariaParameter, tipoCuentaParameter, bancoParameter, fechaingresoParameter, usuarioSistemaParameter);
        }
    }
}
